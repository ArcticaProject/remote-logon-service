/*
 * Generated by gdbus-codegen 2.33.12. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __REMOTE_LOGIN_H__
#define __REMOTE_LOGIN_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for com.canonical.RemoteLogin */

#define TYPE_REMOTE_LOGIN (remote_login_get_type ())
#define REMOTE_LOGIN(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_REMOTE_LOGIN, RemoteLogin))
#define IS_REMOTE_LOGIN(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_REMOTE_LOGIN))
#define REMOTE_LOGIN_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_REMOTE_LOGIN, RemoteLoginIface))

struct _RemoteLogin;
typedef struct _RemoteLogin RemoteLogin;
typedef struct _RemoteLoginIface RemoteLoginIface;

struct _RemoteLoginIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_get_cached_domains_for_server) (
    RemoteLogin *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_uri);

  gboolean (*handle_get_servers) (
    RemoteLogin *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_servers_for_login) (
    RemoteLogin *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_uri,
    const gchar *arg_emailAddress,
    const gchar *arg_password,
    gboolean arg_allowCache);

  gboolean (*handle_set_applications_for_server) (
    RemoteLogin *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_uccsUri,
    const gchar *arg_serverUri,
    GVariant *arg_applications);

  gboolean (*handle_set_last_used_server) (
    RemoteLogin *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_uccsUri,
    const gchar *arg_serverUri);

  void (*login_changed) (
    RemoteLogin *object,
    const gchar *arg_uri,
    const gchar *arg_emailAddress);

  void (*login_servers_updated) (
    RemoteLogin *object,
    const gchar *arg_uri,
    const gchar *arg_emailAddress,
    const gchar *arg_dataType,
    GVariant *arg_serverList);

  void (*servers_updated) (
    RemoteLogin *object,
    GVariant *arg_serverList);

};

GType remote_login_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *remote_login_interface_info (void);
guint remote_login_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void remote_login_complete_get_servers (
    RemoteLogin *object,
    GDBusMethodInvocation *invocation,
    GVariant *serverList);

void remote_login_complete_get_servers_for_login (
    RemoteLogin *object,
    GDBusMethodInvocation *invocation,
    gboolean loginSuccess,
    const gchar *dataType,
    GVariant *serverList);

void remote_login_complete_get_cached_domains_for_server (
    RemoteLogin *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *domains);

void remote_login_complete_set_applications_for_server (
    RemoteLogin *object,
    GDBusMethodInvocation *invocation);

void remote_login_complete_set_last_used_server (
    RemoteLogin *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void remote_login_emit_servers_updated (
    RemoteLogin *object,
    GVariant *arg_serverList);

void remote_login_emit_login_servers_updated (
    RemoteLogin *object,
    const gchar *arg_uri,
    const gchar *arg_emailAddress,
    const gchar *arg_dataType,
    GVariant *arg_serverList);

void remote_login_emit_login_changed (
    RemoteLogin *object,
    const gchar *arg_uri,
    const gchar *arg_emailAddress);



/* D-Bus method calls: */
void remote_login_call_get_servers (
    RemoteLogin *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean remote_login_call_get_servers_finish (
    RemoteLogin *proxy,
    GVariant **out_serverList,
    GAsyncResult *res,
    GError **error);

gboolean remote_login_call_get_servers_sync (
    RemoteLogin *proxy,
    GVariant **out_serverList,
    GCancellable *cancellable,
    GError **error);

void remote_login_call_get_servers_for_login (
    RemoteLogin *proxy,
    const gchar *arg_uri,
    const gchar *arg_emailAddress,
    const gchar *arg_password,
    gboolean arg_allowCache,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean remote_login_call_get_servers_for_login_finish (
    RemoteLogin *proxy,
    gboolean *out_loginSuccess,
    gchar **out_dataType,
    GVariant **out_serverList,
    GAsyncResult *res,
    GError **error);

gboolean remote_login_call_get_servers_for_login_sync (
    RemoteLogin *proxy,
    const gchar *arg_uri,
    const gchar *arg_emailAddress,
    const gchar *arg_password,
    gboolean arg_allowCache,
    gboolean *out_loginSuccess,
    gchar **out_dataType,
    GVariant **out_serverList,
    GCancellable *cancellable,
    GError **error);

void remote_login_call_get_cached_domains_for_server (
    RemoteLogin *proxy,
    const gchar *arg_uri,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean remote_login_call_get_cached_domains_for_server_finish (
    RemoteLogin *proxy,
    gchar ***out_domains,
    GAsyncResult *res,
    GError **error);

gboolean remote_login_call_get_cached_domains_for_server_sync (
    RemoteLogin *proxy,
    const gchar *arg_uri,
    gchar ***out_domains,
    GCancellable *cancellable,
    GError **error);

void remote_login_call_set_applications_for_server (
    RemoteLogin *proxy,
    const gchar *arg_uccsUri,
    const gchar *arg_serverUri,
    GVariant *arg_applications,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean remote_login_call_set_applications_for_server_finish (
    RemoteLogin *proxy,
    GAsyncResult *res,
    GError **error);

gboolean remote_login_call_set_applications_for_server_sync (
    RemoteLogin *proxy,
    const gchar *arg_uccsUri,
    const gchar *arg_serverUri,
    GVariant *arg_applications,
    GCancellable *cancellable,
    GError **error);

void remote_login_call_set_last_used_server (
    RemoteLogin *proxy,
    const gchar *arg_uccsUri,
    const gchar *arg_serverUri,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean remote_login_call_set_last_used_server_finish (
    RemoteLogin *proxy,
    GAsyncResult *res,
    GError **error);

gboolean remote_login_call_set_last_used_server_sync (
    RemoteLogin *proxy,
    const gchar *arg_uccsUri,
    const gchar *arg_serverUri,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_REMOTE_LOGIN_PROXY (remote_login_proxy_get_type ())
#define REMOTE_LOGIN_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_REMOTE_LOGIN_PROXY, RemoteLoginProxy))
#define REMOTE_LOGIN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_REMOTE_LOGIN_PROXY, RemoteLoginProxyClass))
#define REMOTE_LOGIN_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_REMOTE_LOGIN_PROXY, RemoteLoginProxyClass))
#define IS_REMOTE_LOGIN_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_REMOTE_LOGIN_PROXY))
#define IS_REMOTE_LOGIN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_REMOTE_LOGIN_PROXY))

typedef struct _RemoteLoginProxy RemoteLoginProxy;
typedef struct _RemoteLoginProxyClass RemoteLoginProxyClass;
typedef struct _RemoteLoginProxyPrivate RemoteLoginProxyPrivate;

struct _RemoteLoginProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  RemoteLoginProxyPrivate *priv;
};

struct _RemoteLoginProxyClass
{
  GDBusProxyClass parent_class;
};

GType remote_login_proxy_get_type (void) G_GNUC_CONST;

void remote_login_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
RemoteLogin *remote_login_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
RemoteLogin *remote_login_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void remote_login_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
RemoteLogin *remote_login_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
RemoteLogin *remote_login_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_REMOTE_LOGIN_SKELETON (remote_login_skeleton_get_type ())
#define REMOTE_LOGIN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_REMOTE_LOGIN_SKELETON, RemoteLoginSkeleton))
#define REMOTE_LOGIN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_REMOTE_LOGIN_SKELETON, RemoteLoginSkeletonClass))
#define REMOTE_LOGIN_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_REMOTE_LOGIN_SKELETON, RemoteLoginSkeletonClass))
#define IS_REMOTE_LOGIN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_REMOTE_LOGIN_SKELETON))
#define IS_REMOTE_LOGIN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_REMOTE_LOGIN_SKELETON))

typedef struct _RemoteLoginSkeleton RemoteLoginSkeleton;
typedef struct _RemoteLoginSkeletonClass RemoteLoginSkeletonClass;
typedef struct _RemoteLoginSkeletonPrivate RemoteLoginSkeletonPrivate;

struct _RemoteLoginSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  RemoteLoginSkeletonPrivate *priv;
};

struct _RemoteLoginSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType remote_login_skeleton_get_type (void) G_GNUC_CONST;

RemoteLogin *remote_login_skeleton_new (void);


G_END_DECLS

#endif /* __REMOTE_LOGIN_H__ */
